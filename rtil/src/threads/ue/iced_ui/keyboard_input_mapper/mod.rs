mod windows;
mod linux;

use iced::keyboard::key::{Named as IcedNamed, Physical as IcedPhysical, Code as IcedCode, NativeCode as IcedNativeCode};
use iced::keyboard::{Modifiers as IcedModifiers, Event as IcedEvent, Key as IcedKey, Location as IcedLocation};
use iced_runtime::core::SmolStr;
use windows::WindowsKey;
use linux::LinuxKey;
use num_traits::FromPrimitive;

#[derive(Debug, Clone)]
pub struct KeyboardState {
    left_shift_pressed: bool,
    right_shift_pressed: bool,
    left_ctrl_pressed: bool,
    right_ctrl_pressed: bool,
    left_alt_pressed: bool,
    right_alt_pressed: bool,
    left_win_pressed: bool,
    right_win_pressed: bool,
}

impl KeyboardState {
    pub const fn new() -> Self {
        KeyboardState {
            left_shift_pressed: false,
            right_shift_pressed: false,
            left_ctrl_pressed: false,
            right_ctrl_pressed: false,
            left_alt_pressed: false,
            right_alt_pressed: false,
            left_win_pressed: false,
            right_win_pressed: false,
        }
    }

    pub fn key_pressed(&mut self, key: Key) -> (Key, IcedEvent, Option<IcedEvent>) {
        self.key_event(key, true)
    }
    pub fn key_released(&mut self, key: Key) -> (Key, IcedEvent, Option<IcedEvent>) {
        self.key_event(key, false)
    }

    fn key_event(&mut self, mut key: Key, pressed: bool) -> (Key, IcedEvent, Option<IcedEvent>) {
        let mods_before = self.modifiers();
        match key.key_code {
            KeyCode::LeftShift => self.left_shift_pressed = pressed,
            KeyCode::RightShift => self.right_shift_pressed = pressed,
            KeyCode::LeftCtrl => self.left_ctrl_pressed = pressed,
            KeyCode::RightCtrl => self.right_ctrl_pressed = pressed,
            KeyCode::LeftAlt => self.left_alt_pressed = pressed,
            KeyCode::RightAlt => self.right_alt_pressed = pressed,
            KeyCode::LeftWin => self.left_win_pressed = pressed,
            KeyCode::RightWin => self.right_win_pressed = pressed,
            _ => (),
        }
        let mods_after = self.modifiers();
        let mod_event = (mods_before == mods_after).then_some(IcedEvent::ModifiersChanged(mods_after));
        let unmodified_key = key.clone().to_iced_key();
        if let Some(chr) = &mut key.character_code {
            if self.left_shift_pressed || self.right_shift_pressed {
                *chr = chr.to_ascii_uppercase();
            }
        }
        let modified_key = key.clone().to_iced_key();
        let pressed_released_event = if pressed {
            IcedEvent::KeyPressed {
                key: unmodified_key,
                modified_key,
                physical_key: key.as_iced_physical(),
                location: IcedLocation::Standard,
                modifiers: mods_after,
                text: key.character_code.as_ref().map(|s| SmolStr::new_inline(s)),
            }
        } else {
            IcedEvent::KeyReleased {
                key: unmodified_key,
                modified_key,
                physical_key: key.as_iced_physical(),
                location: IcedLocation::Standard,
                modifiers: mods_after,
            }
        };
        (key, pressed_released_event, mod_event)
    }

    fn modifiers(&self) -> IcedModifiers {
        let mut mods = IcedModifiers::empty();
        if self.left_shift_pressed || self.right_shift_pressed {
            mods.insert(IcedModifiers::SHIFT);
        }
        if self.left_ctrl_pressed || self.right_ctrl_pressed {
            mods.insert(IcedModifiers::CTRL);
        }
        if self.left_alt_pressed || self.right_alt_pressed {
            mods.insert(IcedModifiers::ALT);
        }
        if self.left_win_pressed || self.right_win_pressed {
            mods.insert(IcedModifiers::LOGO);
        }
        mods
    }
}

#[derive(rebo::ExternalType, Clone, Debug)]
pub struct Key {
    pub source: Source,
    pub raw_key_code: i32,
    pub raw_character_code: u32,
    pub key_code: KeyCode,
    pub character_code: Option<String>,
}

#[derive(rebo::ExternalType, Copy, Clone, Debug)]
pub enum Source {
    Linux,
    Windows,
}

#[derive(rebo::ExternalType, Copy, Clone, Debug)]
pub enum KeyCode {
    Unknown(i32, u32),
    LeftWin,
    RightWin,
    LeftShift,
    RightShift,
    LeftCtrl,
    RightCtrl,
    LeftAlt,
    RightAlt,
    Backspace,
    Tab,
    Return,
    Pause,
    CapsLock,
    Escape,
    Space,
    PageUp,
    PageDown,
    End,
    Home,
    Left,
    Up,
    Right,
    Down,
    Insert,
    Delete,
    D0,
    D1,
    D2,
    D3,
    D4,
    D5,
    D6,
    D7,
    D8,
    D9,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadMultiply,
    NumpadAdd,
    NumpadSubtract,
    NumpadDecimal,
    NumpadDivide,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    NumLock,
    ScrollLock,
}
impl Key {
    fn character_code(character_code: u32) -> Option<String> {
        (character_code >= 0x20 && character_code <= 0x7e)
            .then(|| (character_code as u8 as char).to_string())
    }

    #[cfg_attr(unix, expect(unused))]
    pub fn try_from_windows(raw_key_code: i32, raw_character_code: u32) -> Self {
        let key_code = match WindowsKey::from_i32(raw_key_code) {
            None => KeyCode::Unknown(raw_key_code, raw_character_code),
            Some(WindowsKey::LWin) => KeyCode::LeftWin,
            Some(WindowsKey::RWin) => KeyCode::RightWin,
            Some(WindowsKey::LShiftKey) => KeyCode::LeftShift,
            Some(WindowsKey::RShiftKey) => KeyCode::RightShift,
            Some(WindowsKey::LControlKey) => KeyCode::LeftCtrl,
            Some(WindowsKey::RControlKey) => KeyCode::RightCtrl,
            Some(WindowsKey::LMenu) => KeyCode::LeftAlt,
            Some(WindowsKey::RMenu) => KeyCode::RightAlt,
            Some(WindowsKey::Back) => KeyCode::Backspace,
            Some(WindowsKey::Tab) => KeyCode::Tab,
            Some(WindowsKey::Return) => KeyCode::Return,
            Some(WindowsKey::Pause) => KeyCode::Pause,
            Some(WindowsKey::CapsLock) => KeyCode::CapsLock,
            Some(WindowsKey::Escape) => KeyCode::Escape,
            Some(WindowsKey::Space) => KeyCode::Space,
            Some(WindowsKey::PageUp) => KeyCode::PageUp,
            Some(WindowsKey::PageDown) => KeyCode::PageDown,
            Some(WindowsKey::End) => KeyCode::End,
            Some(WindowsKey::Home) => KeyCode::Home,
            Some(WindowsKey::Left) => KeyCode::Left,
            Some(WindowsKey::Up) => KeyCode::Up,
            Some(WindowsKey::Right) => KeyCode::Right,
            Some(WindowsKey::Down) => KeyCode::Down,
            Some(WindowsKey::Insert) => KeyCode::Insert,
            Some(WindowsKey::Delete) => KeyCode::Delete,
            Some(WindowsKey::D0) => KeyCode::D0,
            Some(WindowsKey::D1) => KeyCode::D1,
            Some(WindowsKey::D2) => KeyCode::D2,
            Some(WindowsKey::D3) => KeyCode::D3,
            Some(WindowsKey::D4) => KeyCode::D4,
            Some(WindowsKey::D5) => KeyCode::D5,
            Some(WindowsKey::D6) => KeyCode::D6,
            Some(WindowsKey::D7) => KeyCode::D7,
            Some(WindowsKey::D8) => KeyCode::D8,
            Some(WindowsKey::D9) => KeyCode::D9,
            Some(WindowsKey::A) => KeyCode::A,
            Some(WindowsKey::B) => KeyCode::B,
            Some(WindowsKey::C) => KeyCode::C,
            Some(WindowsKey::D) => KeyCode::D,
            Some(WindowsKey::E) => KeyCode::E,
            Some(WindowsKey::F) => KeyCode::F,
            Some(WindowsKey::G) => KeyCode::G,
            Some(WindowsKey::H) => KeyCode::H,
            Some(WindowsKey::I) => KeyCode::I,
            Some(WindowsKey::J) => KeyCode::J,
            Some(WindowsKey::K) => KeyCode::K,
            Some(WindowsKey::L) => KeyCode::L,
            Some(WindowsKey::M) => KeyCode::M,
            Some(WindowsKey::N) => KeyCode::N,
            Some(WindowsKey::O) => KeyCode::O,
            Some(WindowsKey::P) => KeyCode::P,
            Some(WindowsKey::Q) => KeyCode::Q,
            Some(WindowsKey::R) => KeyCode::R,
            Some(WindowsKey::S) => KeyCode::S,
            Some(WindowsKey::T) => KeyCode::T,
            Some(WindowsKey::U) => KeyCode::U,
            Some(WindowsKey::V) => KeyCode::V,
            Some(WindowsKey::W) => KeyCode::W,
            Some(WindowsKey::X) => KeyCode::X,
            Some(WindowsKey::Y) => KeyCode::Y,
            Some(WindowsKey::Z) => KeyCode::Z,
            Some(WindowsKey::NumPad0) => KeyCode::Numpad0,
            Some(WindowsKey::NumPad1) => KeyCode::Numpad1,
            Some(WindowsKey::NumPad2) => KeyCode::Numpad2,
            Some(WindowsKey::NumPad3) => KeyCode::Numpad3,
            Some(WindowsKey::NumPad4) => KeyCode::Numpad4,
            Some(WindowsKey::NumPad5) => KeyCode::Numpad5,
            Some(WindowsKey::NumPad6) => KeyCode::Numpad6,
            Some(WindowsKey::NumPad7) => KeyCode::Numpad7,
            Some(WindowsKey::NumPad8) => KeyCode::Numpad8,
            Some(WindowsKey::NumPad9) => KeyCode::Numpad9,
            Some(WindowsKey::Multiply) => KeyCode::NumpadMultiply,
            Some(WindowsKey::Add) => KeyCode::NumpadAdd,
            Some(WindowsKey::Subtract) => KeyCode::NumpadSubtract,
            Some(WindowsKey::Decimal) => KeyCode::NumpadDecimal,
            Some(WindowsKey::Divide) => KeyCode::NumpadDivide,
            Some(WindowsKey::F1) => KeyCode::F1,
            Some(WindowsKey::F2) => KeyCode::F2,
            Some(WindowsKey::F3) => KeyCode::F3,
            Some(WindowsKey::F4) => KeyCode::F4,
            Some(WindowsKey::F5) => KeyCode::F5,
            Some(WindowsKey::F6) => KeyCode::F6,
            Some(WindowsKey::F7) => KeyCode::F7,
            Some(WindowsKey::F8) => KeyCode::F8,
            Some(WindowsKey::F9) => KeyCode::F9,
            Some(WindowsKey::F10) => KeyCode::F10,
            Some(WindowsKey::F11) => KeyCode::F11,
            Some(WindowsKey::F12) => KeyCode::F12,
            Some(WindowsKey::NumLock) => KeyCode::NumLock,
            Some(WindowsKey::Scroll) => KeyCode::ScrollLock,
        };
        Key {
            source: Source::Windows,
            raw_key_code,
            raw_character_code,
            key_code,
            character_code: Key::character_code(raw_character_code),
        }
    }
    #[cfg_attr(windows, expect(unused))]
    pub fn try_from_linux(raw_key_code: i32, raw_character_code: u32) -> Self {
        let key = LinuxKey::from_i32(raw_key_code)
            .or_else(|| LinuxKey::from_i32(raw_key_code & !(linux::SCANCODE_MASK)));
        let key_code = match key {
            None => KeyCode::Unknown(raw_key_code, raw_character_code),
            Some(LinuxKey::LGui) => KeyCode::LeftWin,
            Some(LinuxKey::RGui) => KeyCode::RightWin,
            Some(LinuxKey::LShift) => KeyCode::LeftShift,
            Some(LinuxKey::RShift) => KeyCode::RightShift,
            Some(LinuxKey::LCtrl) => KeyCode::LeftCtrl,
            Some(LinuxKey::RCtrl) => KeyCode::RightCtrl,
            Some(LinuxKey::LAlt) => KeyCode::LeftAlt,
            Some(LinuxKey::RAlt) => KeyCode::RightAlt,
            Some(LinuxKey::Backspace) => KeyCode::Backspace,
            Some(LinuxKey::Tab) => KeyCode::Tab,
            Some(LinuxKey::Return) => KeyCode::Return,
            Some(LinuxKey::Pause) => KeyCode::Pause,
            Some(LinuxKey::Capslock) => KeyCode::CapsLock,
            Some(LinuxKey::Escape) => KeyCode::Escape,
            Some(LinuxKey::Space) => KeyCode::Space,
            Some(LinuxKey::Pageup) => KeyCode::PageUp,
            Some(LinuxKey::Pagedown) => KeyCode::PageDown,
            Some(LinuxKey::End) => KeyCode::End,
            Some(LinuxKey::Home) => KeyCode::Home,
            Some(LinuxKey::Left) => KeyCode::Left,
            Some(LinuxKey::Up) => KeyCode::Up,
            Some(LinuxKey::Right) => KeyCode::Right,
            Some(LinuxKey::Down) => KeyCode::Down,
            Some(LinuxKey::Insert) => KeyCode::Insert,
            Some(LinuxKey::Delete) => KeyCode::Delete,
            Some(LinuxKey::D0) => KeyCode::D0,
            Some(LinuxKey::D1) => KeyCode::D1,
            Some(LinuxKey::D2) => KeyCode::D2,
            Some(LinuxKey::D3) => KeyCode::D3,
            Some(LinuxKey::D4) => KeyCode::D4,
            Some(LinuxKey::D5) => KeyCode::D5,
            Some(LinuxKey::D6) => KeyCode::D6,
            Some(LinuxKey::D7) => KeyCode::D7,
            Some(LinuxKey::D8) => KeyCode::D8,
            Some(LinuxKey::D9) => KeyCode::D9,
            Some(LinuxKey::A) => KeyCode::A,
            Some(LinuxKey::B) => KeyCode::B,
            Some(LinuxKey::C) => KeyCode::C,
            Some(LinuxKey::D) => KeyCode::D,
            Some(LinuxKey::E) => KeyCode::E,
            Some(LinuxKey::F) => KeyCode::F,
            Some(LinuxKey::G) => KeyCode::G,
            Some(LinuxKey::H) => KeyCode::H,
            Some(LinuxKey::I) => KeyCode::I,
            Some(LinuxKey::J) => KeyCode::J,
            Some(LinuxKey::K) => KeyCode::K,
            Some(LinuxKey::L) => KeyCode::L,
            Some(LinuxKey::M) => KeyCode::M,
            Some(LinuxKey::N) => KeyCode::N,
            Some(LinuxKey::O) => KeyCode::O,
            Some(LinuxKey::P) => KeyCode::P,
            Some(LinuxKey::Q) => KeyCode::Q,
            Some(LinuxKey::R) => KeyCode::R,
            Some(LinuxKey::S) => KeyCode::S,
            Some(LinuxKey::T) => KeyCode::T,
            Some(LinuxKey::U) => KeyCode::U,
            Some(LinuxKey::V) => KeyCode::V,
            Some(LinuxKey::W) => KeyCode::W,
            Some(LinuxKey::X) => KeyCode::X,
            Some(LinuxKey::Y) => KeyCode::Y,
            Some(LinuxKey::Z) => KeyCode::Z,
            Some(LinuxKey::Kp0) => KeyCode::Numpad0,
            Some(LinuxKey::Kp1) => KeyCode::Numpad1,
            Some(LinuxKey::Kp2) => KeyCode::Numpad2,
            Some(LinuxKey::Kp3) => KeyCode::Numpad3,
            Some(LinuxKey::Kp4) => KeyCode::Numpad4,
            Some(LinuxKey::Kp5) => KeyCode::Numpad5,
            Some(LinuxKey::Kp6) => KeyCode::Numpad6,
            Some(LinuxKey::Kp7) => KeyCode::Numpad7,
            Some(LinuxKey::Kp8) => KeyCode::Numpad8,
            Some(LinuxKey::Kp9) => KeyCode::Numpad9,
            Some(LinuxKey::KpMultiply) => KeyCode::NumpadMultiply,
            Some(LinuxKey::KpPlus) => KeyCode::NumpadAdd,
            Some(LinuxKey::KpMinus) => KeyCode::NumpadSubtract,
            Some(LinuxKey::KpDecimal) => KeyCode::NumpadDecimal,
            Some(LinuxKey::KpDivide) => KeyCode::NumpadDivide,
            Some(LinuxKey::KpEnter) => KeyCode::Return,
            Some(LinuxKey::F1) => KeyCode::F1,
            Some(LinuxKey::F2) => KeyCode::F2,
            Some(LinuxKey::F3) => KeyCode::F3,
            Some(LinuxKey::F4) => KeyCode::F4,
            Some(LinuxKey::F5) => KeyCode::F5,
            Some(LinuxKey::F6) => KeyCode::F6,
            Some(LinuxKey::F7) => KeyCode::F7,
            Some(LinuxKey::F8) => KeyCode::F8,
            Some(LinuxKey::F9) => KeyCode::F9,
            Some(LinuxKey::F10) => KeyCode::F10,
            Some(LinuxKey::F11) => KeyCode::F11,
            Some(LinuxKey::F12) => KeyCode::F12,
            Some(LinuxKey::Numlockclear) => KeyCode::NumLock,
            Some(LinuxKey::Scrolllock) => KeyCode::ScrollLock,
        };
        Key {
            source: Source::Linux,
            raw_key_code,
            raw_character_code,
            key_code,
            character_code: Key::character_code(raw_character_code),
        }
    }
    pub fn as_iced_physical(&self) -> IcedPhysical {
        match self.key_code {
            KeyCode::Unknown(key_code, character_code) => {
                log!("unknown key; key_code: {key_code}, character_code: {character_code}");
                match self.source {
                    Source::Linux => IcedPhysical::Unidentified(IcedNativeCode::Xkb(key_code as u32)),
                    Source::Windows => IcedPhysical::Unidentified(IcedNativeCode::Windows(key_code as u16)),
                }
            },
            KeyCode::LeftWin => IcedPhysical::Code(IcedCode::SuperLeft),
            KeyCode::RightWin => IcedPhysical::Code(IcedCode::SuperRight),
            KeyCode::LeftShift => IcedPhysical::Code(IcedCode::ShiftLeft),
            KeyCode::RightShift => IcedPhysical::Code(IcedCode::ShiftRight),
            KeyCode::LeftCtrl => IcedPhysical::Code(IcedCode::ControlLeft),
            KeyCode::RightCtrl => IcedPhysical::Code(IcedCode::ControlRight),
            KeyCode::LeftAlt => IcedPhysical::Code(IcedCode::AltLeft),
            KeyCode::RightAlt => IcedPhysical::Code(IcedCode::AltRight),
            KeyCode::Backspace => IcedPhysical::Code(IcedCode::Backspace),
            KeyCode::Tab => IcedPhysical::Code(IcedCode::Tab),
            KeyCode::Return => IcedPhysical::Code(IcedCode::Enter),
            KeyCode::Pause => IcedPhysical::Code(IcedCode::Pause),
            KeyCode::CapsLock => IcedPhysical::Code(IcedCode::CapsLock),
            KeyCode::Escape => IcedPhysical::Code(IcedCode::Escape),
            KeyCode::Space => IcedPhysical::Code(IcedCode::Space),
            KeyCode::PageUp => IcedPhysical::Code(IcedCode::PageUp),
            KeyCode::PageDown => IcedPhysical::Code(IcedCode::PageDown),
            KeyCode::End => IcedPhysical::Code(IcedCode::End),
            KeyCode::Home => IcedPhysical::Code(IcedCode::Home),
            KeyCode::Left => IcedPhysical::Code(IcedCode::ArrowLeft),
            KeyCode::Up => IcedPhysical::Code(IcedCode::ArrowUp),
            KeyCode::Right => IcedPhysical::Code(IcedCode::ArrowRight),
            KeyCode::Down => IcedPhysical::Code(IcedCode::ArrowDown),
            KeyCode::Insert => IcedPhysical::Code(IcedCode::Insert),
            KeyCode::Delete => IcedPhysical::Code(IcedCode::Delete),
            KeyCode::D0 => IcedPhysical::Code(IcedCode::Numpad0),
            KeyCode::D1 => IcedPhysical::Code(IcedCode::Numpad1),
            KeyCode::D2 => IcedPhysical::Code(IcedCode::Numpad2),
            KeyCode::D3 => IcedPhysical::Code(IcedCode::Numpad3),
            KeyCode::D4 => IcedPhysical::Code(IcedCode::Numpad4),
            KeyCode::D5 => IcedPhysical::Code(IcedCode::Numpad5),
            KeyCode::D6 => IcedPhysical::Code(IcedCode::Numpad6),
            KeyCode::D7 => IcedPhysical::Code(IcedCode::Numpad7),
            KeyCode::D8 => IcedPhysical::Code(IcedCode::Numpad8),
            KeyCode::D9 => IcedPhysical::Code(IcedCode::Numpad9),
            KeyCode::A => IcedPhysical::Code(IcedCode::KeyA),
            KeyCode::B => IcedPhysical::Code(IcedCode::KeyB),
            KeyCode::C => IcedPhysical::Code(IcedCode::KeyC),
            KeyCode::D => IcedPhysical::Code(IcedCode::KeyD),
            KeyCode::E => IcedPhysical::Code(IcedCode::KeyE),
            KeyCode::F => IcedPhysical::Code(IcedCode::KeyF),
            KeyCode::G => IcedPhysical::Code(IcedCode::KeyG),
            KeyCode::H => IcedPhysical::Code(IcedCode::KeyH),
            KeyCode::I => IcedPhysical::Code(IcedCode::KeyI),
            KeyCode::J => IcedPhysical::Code(IcedCode::KeyJ),
            KeyCode::K => IcedPhysical::Code(IcedCode::KeyK),
            KeyCode::L => IcedPhysical::Code(IcedCode::KeyL),
            KeyCode::M => IcedPhysical::Code(IcedCode::KeyM),
            KeyCode::N => IcedPhysical::Code(IcedCode::KeyN),
            KeyCode::O => IcedPhysical::Code(IcedCode::KeyO),
            KeyCode::P => IcedPhysical::Code(IcedCode::KeyP),
            KeyCode::Q => IcedPhysical::Code(IcedCode::KeyQ),
            KeyCode::R => IcedPhysical::Code(IcedCode::KeyR),
            KeyCode::S => IcedPhysical::Code(IcedCode::KeyS),
            KeyCode::T => IcedPhysical::Code(IcedCode::KeyT),
            KeyCode::U => IcedPhysical::Code(IcedCode::KeyU),
            KeyCode::V => IcedPhysical::Code(IcedCode::KeyV),
            KeyCode::W => IcedPhysical::Code(IcedCode::KeyW),
            KeyCode::X => IcedPhysical::Code(IcedCode::KeyX),
            KeyCode::Y => IcedPhysical::Code(IcedCode::KeyY),
            KeyCode::Z => IcedPhysical::Code(IcedCode::KeyZ),
            KeyCode::Numpad0 => IcedPhysical::Code(IcedCode::Numpad0),
            KeyCode::Numpad1 => IcedPhysical::Code(IcedCode::Numpad1),
            KeyCode::Numpad2 => IcedPhysical::Code(IcedCode::Numpad2),
            KeyCode::Numpad3 => IcedPhysical::Code(IcedCode::Numpad3),
            KeyCode::Numpad4 => IcedPhysical::Code(IcedCode::Numpad4),
            KeyCode::Numpad5 => IcedPhysical::Code(IcedCode::Numpad5),
            KeyCode::Numpad6 => IcedPhysical::Code(IcedCode::Numpad6),
            KeyCode::Numpad7 => IcedPhysical::Code(IcedCode::Numpad7),
            KeyCode::Numpad8 => IcedPhysical::Code(IcedCode::Numpad8),
            KeyCode::Numpad9 => IcedPhysical::Code(IcedCode::Numpad9),
            KeyCode::NumpadMultiply => IcedPhysical::Code(IcedCode::NumpadMultiply),
            KeyCode::NumpadAdd => IcedPhysical::Code(IcedCode::NumpadAdd),
            KeyCode::NumpadSubtract => IcedPhysical::Code(IcedCode::NumpadSubtract),
            KeyCode::NumpadDecimal => IcedPhysical::Code(IcedCode::NumpadDecimal),
            KeyCode::NumpadDivide => IcedPhysical::Code(IcedCode::NumpadDivide),
            KeyCode::F1 => IcedPhysical::Code(IcedCode::F1),
            KeyCode::F2 => IcedPhysical::Code(IcedCode::F2),
            KeyCode::F3 => IcedPhysical::Code(IcedCode::F3),
            KeyCode::F4 => IcedPhysical::Code(IcedCode::F4),
            KeyCode::F5 => IcedPhysical::Code(IcedCode::F5),
            KeyCode::F6 => IcedPhysical::Code(IcedCode::F6),
            KeyCode::F7 => IcedPhysical::Code(IcedCode::F7),
            KeyCode::F8 => IcedPhysical::Code(IcedCode::F8),
            KeyCode::F9 => IcedPhysical::Code(IcedCode::F9),
            KeyCode::F10 => IcedPhysical::Code(IcedCode::F10),
            KeyCode::F11 => IcedPhysical::Code(IcedCode::F11),
            KeyCode::F12 => IcedPhysical::Code(IcedCode::F12),
            KeyCode::NumLock => IcedPhysical::Code(IcedCode::NumLock),
            KeyCode::ScrollLock => IcedPhysical::Code(IcedCode::ScrollLock),
        }
    }
    pub fn to_iced_key(self) -> IcedKey {
        if let Some(character) = self.character_code {
            return IcedKey::Character(SmolStr::new_inline(&character));
        }
        match self.key_code {
            KeyCode::Unknown(key_code, character_code) => {
                log!("unknown key; key_code: {key_code}, character_code: {character_code}");
                IcedKey::Unidentified
            },
            KeyCode::LeftWin => IcedKey::Named(IcedNamed::Super),
            KeyCode::RightWin => IcedKey::Named(IcedNamed::Super),
            KeyCode::LeftShift => IcedKey::Named(IcedNamed::Shift),
            KeyCode::RightShift => IcedKey::Named(IcedNamed::Shift),
            KeyCode::LeftCtrl => IcedKey::Named(IcedNamed::Control),
            KeyCode::RightCtrl => IcedKey::Named(IcedNamed::Control),
            KeyCode::LeftAlt => IcedKey::Named(IcedNamed::Alt),
            KeyCode::RightAlt => IcedKey::Named(IcedNamed::Alt),
            KeyCode::Backspace => IcedKey::Named(IcedNamed::Backspace),
            KeyCode::Tab => IcedKey::Named(IcedNamed::Tab),
            KeyCode::Return => IcedKey::Named(IcedNamed::Enter),
            KeyCode::Pause => IcedKey::Named(IcedNamed::Pause),
            KeyCode::CapsLock => IcedKey::Named(IcedNamed::CapsLock),
            KeyCode::Escape => IcedKey::Named(IcedNamed::Escape),
            KeyCode::Space => IcedKey::Named(IcedNamed::Space),
            KeyCode::PageUp => IcedKey::Named(IcedNamed::PageUp),
            KeyCode::PageDown => IcedKey::Named(IcedNamed::PageDown),
            KeyCode::End => IcedKey::Named(IcedNamed::End),
            KeyCode::Home => IcedKey::Named(IcedNamed::Home),
            KeyCode::Left => IcedKey::Named(IcedNamed::ArrowLeft),
            KeyCode::Up => IcedKey::Named(IcedNamed::ArrowUp),
            KeyCode::Right => IcedKey::Named(IcedNamed::ArrowRight),
            KeyCode::Down => IcedKey::Named(IcedNamed::ArrowDown),
            KeyCode::Insert => IcedKey::Named(IcedNamed::Insert),
            KeyCode::Delete => IcedKey::Named(IcedNamed::Delete),
            KeyCode::D0 => IcedKey::Character(SmolStr::new_inline("0")),
            KeyCode::D1 => IcedKey::Character(SmolStr::new_inline("1")),
            KeyCode::D2 => IcedKey::Character(SmolStr::new_inline("2")),
            KeyCode::D3 => IcedKey::Character(SmolStr::new_inline("3")),
            KeyCode::D4 => IcedKey::Character(SmolStr::new_inline("4")),
            KeyCode::D5 => IcedKey::Character(SmolStr::new_inline("5")),
            KeyCode::D6 => IcedKey::Character(SmolStr::new_inline("6")),
            KeyCode::D7 => IcedKey::Character(SmolStr::new_inline("7")),
            KeyCode::D8 => IcedKey::Character(SmolStr::new_inline("8")),
            KeyCode::D9 => IcedKey::Character(SmolStr::new_inline("9")),
            KeyCode::A => IcedKey::Character(SmolStr::new_inline("A")),
            KeyCode::B => IcedKey::Character(SmolStr::new_inline("B")),
            KeyCode::C => IcedKey::Character(SmolStr::new_inline("C")),
            KeyCode::D => IcedKey::Character(SmolStr::new_inline("D")),
            KeyCode::E => IcedKey::Character(SmolStr::new_inline("E")),
            KeyCode::F => IcedKey::Character(SmolStr::new_inline("F")),
            KeyCode::G => IcedKey::Character(SmolStr::new_inline("G")),
            KeyCode::H => IcedKey::Character(SmolStr::new_inline("H")),
            KeyCode::I => IcedKey::Character(SmolStr::new_inline("I")),
            KeyCode::J => IcedKey::Character(SmolStr::new_inline("J")),
            KeyCode::K => IcedKey::Character(SmolStr::new_inline("K")),
            KeyCode::L => IcedKey::Character(SmolStr::new_inline("L")),
            KeyCode::M => IcedKey::Character(SmolStr::new_inline("M")),
            KeyCode::N => IcedKey::Character(SmolStr::new_inline("N")),
            KeyCode::O => IcedKey::Character(SmolStr::new_inline("O")),
            KeyCode::P => IcedKey::Character(SmolStr::new_inline("P")),
            KeyCode::Q => IcedKey::Character(SmolStr::new_inline("Q")),
            KeyCode::R => IcedKey::Character(SmolStr::new_inline("R")),
            KeyCode::S => IcedKey::Character(SmolStr::new_inline("S")),
            KeyCode::T => IcedKey::Character(SmolStr::new_inline("T")),
            KeyCode::U => IcedKey::Character(SmolStr::new_inline("U")),
            KeyCode::V => IcedKey::Character(SmolStr::new_inline("V")),
            KeyCode::W => IcedKey::Character(SmolStr::new_inline("W")),
            KeyCode::X => IcedKey::Character(SmolStr::new_inline("X")),
            KeyCode::Y => IcedKey::Character(SmolStr::new_inline("Y")),
            KeyCode::Z => IcedKey::Character(SmolStr::new_inline("Z")),
            KeyCode::Numpad0 => IcedKey::Character(SmolStr::new_inline("0")),
            KeyCode::Numpad1 => IcedKey::Character(SmolStr::new_inline("1")),
            KeyCode::Numpad2 => IcedKey::Character(SmolStr::new_inline("2")),
            KeyCode::Numpad3 => IcedKey::Character(SmolStr::new_inline("3")),
            KeyCode::Numpad4 => IcedKey::Character(SmolStr::new_inline("4")),
            KeyCode::Numpad5 => IcedKey::Character(SmolStr::new_inline("5")),
            KeyCode::Numpad6 => IcedKey::Character(SmolStr::new_inline("6")),
            KeyCode::Numpad7 => IcedKey::Character(SmolStr::new_inline("7")),
            KeyCode::Numpad8 => IcedKey::Character(SmolStr::new_inline("8")),
            KeyCode::Numpad9 => IcedKey::Character(SmolStr::new_inline("9")),
            KeyCode::NumpadMultiply => IcedKey::Character(SmolStr::new_inline("*")),
            KeyCode::NumpadAdd => IcedKey::Character(SmolStr::new_inline("+")),
            KeyCode::NumpadSubtract => IcedKey::Character(SmolStr::new_inline("-")),
            KeyCode::NumpadDecimal => IcedKey::Character(SmolStr::new_inline(".")),
            KeyCode::NumpadDivide => IcedKey::Character(SmolStr::new_inline("/")),
            KeyCode::F1 => IcedKey::Named(IcedNamed::F1),
            KeyCode::F2 => IcedKey::Named(IcedNamed::F2),
            KeyCode::F3 => IcedKey::Named(IcedNamed::F3),
            KeyCode::F4 => IcedKey::Named(IcedNamed::F4),
            KeyCode::F5 => IcedKey::Named(IcedNamed::F5),
            KeyCode::F6 => IcedKey::Named(IcedNamed::F6),
            KeyCode::F7 => IcedKey::Named(IcedNamed::F7),
            KeyCode::F8 => IcedKey::Named(IcedNamed::F8),
            KeyCode::F9 => IcedKey::Named(IcedNamed::F9),
            KeyCode::F10 => IcedKey::Named(IcedNamed::F10),
            KeyCode::F11 => IcedKey::Named(IcedNamed::F11),
            KeyCode::F12 => IcedKey::Named(IcedNamed::F12),
            KeyCode::NumLock => IcedKey::Named(IcedNamed::NumLock),
            KeyCode::ScrollLock => IcedKey::Named(IcedNamed::ScrollLock),
        }
    }
}
